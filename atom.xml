<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Nest]]></title>
  <link href="http://grayplumage.github.io/atom.xml" rel="self"/>
  <link href="http://grayplumage.github.io/"/>
  <updated>2016-04-25T16:52:03+08:00</updated>
  <id>http://grayplumage.github.io/</id>
  <author>
    <name><![CDATA[GrayPlumage]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL：假脱机]]></title>
    <link href="http://grayplumage.github.io/blog/2015/12/29/sql-tablespool/"/>
    <updated>2015-12-29T19:33:18+08:00</updated>
    <id>http://grayplumage.github.io/blog/2015/12/29/sql-tablespool</id>
    <content type="html"><![CDATA[<h2>表假脱机（TableSpool）</h2>

<p>今天聊聊前段时间接触一个小项目时遇到的问题。前段时间完成一个查询用apk后，老师让帮着思考给数据库加索引。由于查询功能使用的核心表采用了软删除，而实时数据采集即存且暂不考虑定期删除=_=，运行一周左右就已包含了6万多的数据量，所以为查询优化设置合适的索引也就理所应当了。</p>

<p>然后就是重拾大学SQL知识，为聚集索引、非聚集索引而上下求索。由于是业余时间干的外加项目也不急，一晃多少天过去了——那天闲时打开数据库select count(*)， 望着130W+的数据量我想还是花一下午给它规规矩矩加个索引吧。然而试验了一下午，靠谱不靠谱的索引都加了速度还是没有改善……加与不加的差距一度保持在3s以内，而此时打开apk一个简单的查询早已掉速严重。于是一下午得出一个没什么有成就感的结论——查询速度不达标？也许不是索引的锅……</p>

<p>第二天为了荣耀奋斗，虽然我估计写好的apk估计还没找到用户去用，但怎么也不能跟之前当面演示的效果大相径庭……这次学精了，直接定位到使用次数最多的查询语句，执行了一下果然时间不能忍！然后打开执行计划，映入眼帘的是这个东西——表假脱机。</p>

<p>Simply and irresponsibly speaking, 当数据要么需要被再次使用，要么需要与数据源隔离时，需要把这堆数据保存到临时表tempdb来操作。想到查询过程中涉及的一个表不仅数据量庞大且实时更新后我想多半是第二个原因没跑了。然而为什么它就spool了？说到底那个查询用的方法是select <em>， 而我需要用到的查询不过需要其中四五列罢了。究其原因是数据库端的人图省事，一个select </em>的方法作用在视图上，查询后再取其所需。然而这个视图要4个表join、日期排序、按类型取top才能生成的，其中一个表数据量大还实时inserting呢……</p>

<p>于是最终以建议独立写符合需求的select存储过程这一“常识”而终。4个表的主键聚集索引基本完成了所有索引功效（大部分占时0%），最大的time consumer变成了挂着索引的order by。老师称“分析得很到位”，断断续续复习了下索引知识并了解了点spool皮毛——皆大欢喜，皆大欢喜。</p>

<h2>后记</h2>

<p>写这篇文章的时候又连上数据库看了下，数据已达400W+。想着截张图放进博文“真相”一下时，突然发现说好的TableSpool不见了，取而代之的成了索引假脱机，其谓词所在列在表中明明有聚集索引=_=.</p>

<p><img src="https://github.com/GrayPlumage/grayplumage.github.com/raw/master/res/pic/indexspool.png" alt="indexSpool" /></p>

<p>看来SQL Server的内部优化策略对我来说还是个谜啊……</p>

<p>果然还有很长的路要走……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重构：消除switch]]></title>
    <link href="http://grayplumage.github.io/blog/2015/12/22/refactor-kill-switch/"/>
    <updated>2015-12-22T16:23:55+08:00</updated>
    <id>http://grayplumage.github.io/blog/2015/12/22/refactor-kill-switch</id>
    <content type="html"><![CDATA[<h2>重构</h2>

<p>这几天总结一下之前学习重构过程中比较令我印象深刻的一步。</p>

<p>曾经对面向对象的理解是“像现实世界一样编写程序”，面向过程则是规规矩矩的机器思维的灵活演变。前不久在《重构》里经历前后page穿针走线的几小口啃食后，发现原来面向对象需要have its own fashion.说“面向对象”是一种“思想”，是有其根基的。</p>

<p>而其中比较典型的就是去除switch的过程——</p>

<p><strong>“面向对象程序的一个最明显的特征是：少用switch（或case）语句”</strong>。归根结底，switch的存在是为了根据判定值的不同给出不同的动作，如果从面向过程语言的最初目的分析，其存在的初衷多数是为了避免过多的if&amp;else语句。然而在面向对象的语言当中，我们往往用不同的对象来封装旗下的动作（function）。因此switch作为“动作指示灯”的一部分作用就显得不合时宜了——既然我们可以将动作（function）封装到各自所属的类中，在程序里使用switch来“引路”，与面向对象的思想大相径庭。</p>

<p><strong>Switch must GO.</strong></p>

<p>《Refactor》给出的是公司职员薪资的例子，并以此基础完成了消除switch的史诗。个人觉得书中的例子举得很清晰明确且贴近现实，建议有机会能够亲自按《Refactor》列举的过程走一遍。这里试着借助盒子和小球来重现重构的过程：</p>

<p>有红色和黄色两种盒子，各有一个按钮；按动红盒的按钮红盒会弹出一个红球，黄色同理。我们的function就是根据自己想要的颜色来按按钮，于是原始的switch实现是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">getBall</span><span class="o">(</span><span class="kt">int</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="o">(</span><span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">RED:</span>
</span><span class='line'>            <span class="n">GIVE</span> <span class="n">THE</span> <span class="n">RED</span> <span class="n">BALL</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YELLOW:</span>
</span><span class='line'>            <span class="n">GIVE</span> <span class="n">THE</span> <span class="n">YELLOW</span> <span class="n">BALL</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">......</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>第一步：取代类型码</h3>

<p>“你有一个不可变的类型码，它会影响类的行为——以子类取代这个类型码”
“你有一个类型码，它会影响类的行为，但你<strong>无法通过继承手法消除它</strong>——以状态对象取代类型码”</p>

<p>什么叫<strong>影响类的行为</strong>？在这里的例子中就是颜色（类型码）会对弹出什么球（行为）有影响。怎么判断<strong>能不能使用继承</strong>呢？这要看现实条件了。在这里的例子中，如果盒子的需要有这样一个功能，比如有一天人们需要再添加一种蓝盒弹蓝球，他们如果需要现有的的盒子具有“一键变身”功能（如让某个红盒一键变蓝盒），那么这时利用继承恐怕就不合适了，因为红&amp;蓝在此时必然是继承自同一父类的2个子类，各自有不同的fuction。我们无法让RedBox类在代码中一下子变成BlueBox类。对应的，如果人们不用这么强大的盒子功能，使用简单的继承就好~</p>

<h4>Replace Type Code With Subclasses</h4>

<p>自然的，父类就是Box，而我们的RedBox,YellowBox继承自它。由于盒子均要实现弹球的动作，我们可以在父类中定义抽象函数，让子类各自实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//父类Box</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">RED</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">YELLOW</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">getBall</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">getType</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">Box</span> <span class="nf">create</span><span class="o">(</span><span class="kt">int</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">RED:</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">RedBox</span><span class="o">();</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">YELLOW:</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">YellowBox</span><span class="o">();</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentExcption</span><span class="o">(</span><span class="s">&quot;Incorrect tpye code value&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//子类RedBox,YellowBox同</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">RedBox</span> <span class="kd">extends</span> <span class="n">Box</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getBall</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">GIVE</span> <span class="n">THE</span> <span class="n">RED</span> <span class="n">BALL</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">getType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Box</span><span class="o">.</span><span class="na">RED</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">YellowBox</span> <span class="kd">extends</span> <span class="n">Box</span><span class="o">....</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>“这里只有一处用到的switch语句，并且只用于决定创建何种对象，这样的switch语句是可以接受的”。</strong></p>

<h4>Replace Type Code with State/Strategy</h4>

<p>当类型码因为一些原因不能通过继承消除时，我们往往需要考虑通过State/Strategy模式完成取代。</p>

<p><strong>“我们需要声明一个状态类，把它声明为一个抽象类，并提供一个抽象函数，用以返回类型码”</strong>。由于类型码的改变不能借由继承来完成，也就是说我们构造RedBox、YellowBox的判断不能再放在Box当中，这就是我们为什么要新建一个BoxType来实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//新建的BoxType类用以存储类型码</span>
</span><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BoxType</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">RED</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">YELLOW</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">getTypeCode</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="n">BoxType</span> <span class="nf">newType</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">switch</span><span class="o">(</span><span class="n">code</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">RED:</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">RedBox</span><span class="o">();</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">YELLOW:</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">YellowBox</span><span class="o">();</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Incorrect Box Code&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//子类RedBox继承自BoxType，Yellow同</span>
</span><span class='line'><span class="kd">class</span> <span class="nf">RedBox</span><span class="o">()</span> <span class="kd">extends</span> <span class="n">BoxType</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">getTypeCode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">BoxType</span><span class="o">.</span><span class="na">RED</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nf">YellowBox</span><span class="o">()</span> <span class="kd">extends</span> <span class="n">BoxType</span><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Box类，原本类型码int值_type用新建的BoxType类_type替代</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">BoxType</span> <span class="n">_type</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">setType</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">_type</span> <span class="o">=</span> <span class="n">BoxType</span><span class="o">.</span><span class="na">newType</span><span class="o">(</span><span class="n">code</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//BoxType中的抽象方法，将在被继承的RedBox，YellowBox中被各自实现</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">getType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">_type</span><span class="o">.</span><span class="na">getTypeCode</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//根据BoxType中的类型码给出对应的球</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getBall</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="o">(</span><span class="n">getType</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">BoxType</span><span class="o">.</span><span class="na">RED</span><span class="o">:</span>
</span><span class='line'>            <span class="n">GIVE</span> <span class="n">THE</span> <span class="n">RED</span> <span class="n">BALL</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">BoxType</span><span class="o">.</span><span class="na">YELLOW</span><span class="o">:</span>
</span><span class='line'>            <span class="n">GIVE</span> <span class="n">THE</span> <span class="n">YELLOW</span> <span class="n">BALL</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Incorrect BoxType&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>什么什么，说是要消除switch结果现在蹦出了两个？！看管别急，因为这一步的主要目的是将类型码从Box中消除（事实上转移到了新建的BoxType类当中），接下来的步骤里将会对switch进行清理。</p>

<h3>第二步：清理条件表达式switch</h3>

<p>“你手上有个条件表达式，它根据对象类型的不同选择不同的行为——将这个条件表达式的每个分支放进一个子类内的复写函数中，然后将原始函数声明为抽象函数”</p>

<p>说的再具体直白一些，那就是将getBall的动作设法交给各自的Box来实现，如此原本保有条件表达式（switch）的父类（BoxType）不再实现具体的动作，能力架空之后自然将其声明为抽象函数“以示职能”，条件表达式也自然而然消失不见。</p>

<p>这一步主要是针对行为选择性的条件表达式进行清理，所以第一步中Replace Type Code With Subclasses里父类中的switch人畜无害，我们自然要对State/Strategy法的历史遗留问题进行开刀：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BoxType</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">RED</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">YELLOW</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">getTypeCode</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="n">BoxType</span> <span class="nf">newType</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">......</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">getBall</span><span class="o">(</span><span class="n">Box</span> <span class="n">box</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nf">RedBox</span><span class="o">()</span> <span class="kd">extends</span> <span class="n">BoxType</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">getTypeCode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">BoxType</span><span class="o">.</span><span class="na">RED</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">getBall</span><span class="o">(</span><span class="n">Box</span> <span class="n">box</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">GIVE</span> <span class="n">THE</span> <span class="n">RED</span> <span class="n">BALL</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nf">YellowBox</span><span class="o">()</span> <span class="kd">extends</span> <span class="n">BoxType</span><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么Box类此时还留之何用呢？事实上此时Box原本的职能基本都交给了BoxType，对不同颜色Box的新建工作也基本不需要再经由它（用到RedBox只需要实例化一个RedBox就好）。不过作为所有Box对象的原型，Box类中可以储存一些必要的、各类型盒子都会用到的共同动作——比如GIVE THE BALL，盒子内部的抓球动作也许就是所有盒子都要进行的共同动作。此时我们只要在Box中实现一次，<strong>由于abstract void getBall(Box box)参数中传入了Box，在红盒黄盒实现的过程中我们只要直接调用就OK了。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">BoxType</span> <span class="n">_type</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//此时实例化某种Box已经不需要借由Box类，此时setType方法可以去除了</span>
</span><span class='line'>    <span class="c1">//void setType(int code);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">getType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="n">_type</span><span class="o">.</span><span class="na">getTypeCode</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">grab</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">THE</span> <span class="n">ACTION</span> <span class="n">OF</span> <span class="n">GRAB</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BoxType</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">RED</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">YELLOW</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">getTypeCode</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">getBall</span><span class="o">(</span><span class="n">Box</span> <span class="n">box</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//同理BoxType类里的newType()也可以去除，其下的switch也被清理</span>
</span><span class='line'>  <span class="c1">//static BoxType newType(int code)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nf">RedBox</span><span class="o">()</span> <span class="kd">extends</span> <span class="n">BoxType</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">getTypeCode</span><span class="o">()</span> <span class="o">{...}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//GIVE THE RED BALL的具体分步实现</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">getBall</span><span class="o">(</span><span class="n">Box</span> <span class="n">box</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">box</span><span class="o">.</span><span class="na">grab</span><span class="o">();</span>
</span><span class='line'>        <span class="n">box</span><span class="o">.</span><span class="na">XXX</span><span class="o">();</span>
</span><span class='line'>        <span class="o">.......</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，Replace Type Code with State/Strategy中的switch便被我们清理完成。</p>

<p>关于原书《重构》中这一过程的实现案例，即Employee例子的代码实现，上传到了 <a href="http://download.csdn.net/detail/u011185952/9501796">http://download.csdn.net/detail/u011185952/9501796</a>  供大家小小对比一下。其实关于重构的学习是一个过程问题，最好的学习方法是从重构前到重构后亲自实现一遍，细细体会个中步骤的目的与结果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客成立]]></title>
    <link href="http://grayplumage.github.io/blog/2015/12/13/my-first-blog/"/>
    <updated>2015-12-13T14:54:26+08:00</updated>
    <id>http://grayplumage.github.io/blog/2015/12/13/my-first-blog</id>
    <content type="html"><![CDATA[<p>终于是有了自己的小博客，Octopress是既照顾了我“敲出”自己博客的愿望又不至于搞得太麻烦的心理。</p>

<p>以后会贴出一些平时学习总结出来的一些问题和解决办法吧，顺便是不是还能不务正业的贴点兴趣爱好？谁说这要是纯纯正正的“技术博文”了？毕竟也是刚刚踏上组机道路的……</p>

<p>不过个人习惯，不喜欢写一些乱七八糟的东西凑字数。所以博文大概就是会保持原创，毕竟那些值得转载的东西都让我塞进收藏夹了……不过原创按我现在这水平也许没法保证质量，所以我估计多年以后回首往期博文，它若是经历了“大->小->大”的过程，相比大家也知道期间发生了什么吧XD</p>

<p>毕竟不管怎样——做人，开心最重要！</p>
]]></content>
  </entry>
  
</feed>
